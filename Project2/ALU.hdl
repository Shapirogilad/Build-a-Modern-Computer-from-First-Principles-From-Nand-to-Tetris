// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //zx and nx
    Mux16(a=x ,b=false ,sel=zx ,out=OutZx );
    Not16(in=OutZx ,out=InNx );
    Mux16(a=OutZx ,b=InNx ,sel=nx ,out=OutX );

    //zy and ny
    Mux16(a=y ,b=false ,sel=zy ,out=OutZy );
    Not16(in=OutZy ,out=InNy );
    Mux16(a=OutZy ,b=InNy ,sel=ny ,out=OutY ); 

    //f 
    Add16(a=OutX ,b=OutY ,out=OutPlus );
    And16(a=OutX ,b=OutY ,out=OutAnd );
    Mux16(a=OutAnd ,b=OutPlus ,sel=f ,out=Out1 );

    //no and out and ng
    Not16(in=Out1 ,out=Out2 ); 
    Mux16(a=Out1 ,b=Out2 ,sel=no ,out[0..7]=Low8Out,out[8..15]=High8Out, out[15]=ng, out=out );

    //zr
    Or8Way(in=Low8Out ,out=OutZr1 ); 
    Or8Way(in=High8Out ,out=OutZr2 );
    Or(a=OutZr1 ,b=OutZr2 ,out=NotZr );
    Not(in=NotZr ,out=zr ); 





}
