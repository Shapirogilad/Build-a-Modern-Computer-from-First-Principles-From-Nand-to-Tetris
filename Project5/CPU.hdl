// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    Mux16(a=instruction ,b=OutAlu ,sel=instruction[15] ,out=InRegA ); // first mux

    Not(in=instruction[15] ,out=CommanedA ); // if instruction[15] = 0 then it is A instruction
    Or(a=instruction[5] ,b=CommanedA ,out=LoadRegA ); // load reg A if instruction[5]=1 or A instruction
    ARegister(in=InRegA ,load=LoadRegA ,out=OutRegA1,out=OutRegA2, out[0..14]=addressM ); // A Register

    Mux16(a=OutRegA1 ,b=inM ,sel=instruction[12] ,out=InAlu2 ); // mux for M or A
    And(a=instruction[4] ,b=instruction[15] ,out=LoadD ); // load D if C instruction and instruction[4]
    DRegister(in=OutAlu ,load=LoadD ,out=InAlu1 ); //D Register
    
    ALU(x=InAlu1 ,y=InAlu2 ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] ,out=outM, out=OutAlu ,zr=zr ,ng=ng );
    
    Not(in=zr ,out=NotZr );
    Not(in=ng ,out=NotNg );
    And(a=instruction[3] ,b=instruction[15] ,out=writeM ); // write to M if C instruction and instruction[3]

    //PC
    

    Mux16(a=true ,b=false ,sel=zr ,out=InMuxF ); //out != 0 code:101
    Mux16(a=false ,b=true ,sel=zr ,out=InMuxC ); // out = 0 code:010

    And(a=NotNg ,b=NotZr ,out=out1 ); //sel bit to determine that it is positive

    Mux16(a=false ,b=true ,sel=ng ,out=InMuxE ); // out < 0 code:100
    Mux16(a=false ,b=true ,sel=out1 ,out=InMuxB ); // out > 0 code:001

    Or16(a=InMuxB ,b=InMuxC ,out=InMuxD ); // out >= 0 code:011
    Or16(a=InMuxE ,b=InMuxC ,out=InMuxG ); // out <= 0 code:110
    

    Mux8Way16(a=false ,b=InMuxB ,c=InMuxC ,d=InMuxD ,e=InMuxE ,f=InMuxF ,g=InMuxG ,h=true ,sel[2]=instruction[2], sel[1]=instruction[1], sel[0]=instruction[0] ,out[0]=OutJmp );

    And(a=OutJmp ,b=instruction[15] ,out=LoadPc ); //load pc only if C instruction
    PC(in=OutRegA2 ,load=LoadPc ,inc=true ,reset=reset ,out[0..14]=pc );
}
